{"name":"untyped main::main(boolean nondet)","description":null,"nodes":[{"id":0,"subNodes":[1,2],"text":"str := \"\""},{"id":1,"text":"str"},{"id":2,"text":"\"\""},{"id":3,"text":"nondet"},{"id":4,"text":"Open block: 'go-testcases/tarsis/count/count.go':23:11"},{"id":5,"subNodes":[6,7],"text":"str = \"this is the thing\""},{"id":6,"text":"str"},{"id":7,"text":"\"this is the thing\""},{"id":8,"text":"Close block: 'go-testcases/tarsis/count/count.go':23:11"},{"id":9,"text":"Open block: 'go-testcases/tarsis/count/count.go':25:8"},{"id":10,"subNodes":[11,12],"text":"str = \"the throat\""},{"id":11,"text":"str"},{"id":12,"text":"\"the throat\""},{"id":13,"text":"Close block: 'go-testcases/tarsis/count/count.go':25:8"},{"id":14,"subNodes":[15,16],"text":"count := main::Count(str, \"th\")"},{"id":15,"text":"count"},{"id":16,"subNodes":[17,18],"text":"main::Count(str, \"th\")"},{"id":17,"text":"str"},{"id":18,"text":"\"th\""},{"id":19,"subNodes":[20],"text":"main::assert(>(count, 0))"},{"id":20,"subNodes":[21,22],"text":">(count, 0)"},{"id":21,"text":"count"},{"id":22,"text":"0"},{"id":23,"subNodes":[24],"text":"main::assert(==(count, 0))"},{"id":24,"subNodes":[25,26],"text":"==(count, 0)"},{"id":25,"text":"count"},{"id":26,"text":"0"},{"id":27,"subNodes":[28],"text":"main::assert(==(count, 3))"},{"id":28,"subNodes":[29,30],"text":"==(count, 3)"},{"id":29,"text":"count"},{"id":30,"text":"3"},{"id":31,"text":"ret"}],"edges":[{"sourceId":0,"destId":3,"kind":"SequentialEdge"},{"sourceId":3,"destId":4,"kind":"TrueEdge"},{"sourceId":3,"destId":9,"kind":"FalseEdge"},{"sourceId":4,"destId":5,"kind":"SequentialEdge"},{"sourceId":5,"destId":8,"kind":"SequentialEdge"},{"sourceId":8,"destId":14,"kind":"SequentialEdge"},{"sourceId":9,"destId":10,"kind":"SequentialEdge"},{"sourceId":10,"destId":13,"kind":"SequentialEdge"},{"sourceId":13,"destId":14,"kind":"SequentialEdge"},{"sourceId":14,"destId":19,"kind":"SequentialEdge"},{"sourceId":19,"destId":23,"kind":"SequentialEdge"},{"sourceId":23,"destId":27,"kind":"SequentialEdge"},{"sourceId":27,"destId":31,"kind":"SequentialEdge"}],"descriptions":[{"nodeId":0,"description":{"expressions":["str"],"state":{"<>":{"heap":"monolith","type":{"map":{"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"str":"CertainlyContained: {}, MaybeContained: {}"},"stack":"CertainlyContained: {}, MaybeContained: {}"}}}}},{"nodeId":1,"description":{"expressions":["str"],"state":{"<>":{"heap":"monolith","type":{"map":{"nondet":["boolean"]},"stack":"#TOP#"},"value":{"map":"empty","stack":"_|_"}}}}},{"nodeId":2,"description":{"expressions":["\"\""],"state":{"<>":{"heap":"monolith","type":{"map":{"nondet":["boolean"]},"stack":["string"]},"value":{"map":"empty","stack":"CertainlyContained: {}, MaybeContained: {}"}}}}},{"nodeId":3,"description":{"expressions":["nondet"],"state":{"<>":{"heap":"monolith","type":{"map":{"nondet":["boolean"],"str":["string"]},"stack":["boolean"]},"value":{"map":{"str":"CertainlyContained: {}, MaybeContained: {}"},"stack":"_|_"}}}}},{"nodeId":4,"description":{"expressions":["nondet"],"state":{"<[nondet]True>":{"heap":"monolith","type":{"map":{"['go-testcases/tarsis/count/count.go':23:11]:nondet":["boolean"],"['go-testcases/tarsis/count/count.go':23:11]:str":["string"],"nondet":["boolean"],"str":["string"]},"stack":["boolean"]},"value":{"map":{"['go-testcases/tarsis/count/count.go':23:11]:str":"CertainlyContained: {}, MaybeContained: {}","str":"CertainlyContained: {}, MaybeContained: {}"},"stack":"_|_"}}}}},{"nodeId":5,"description":{"expressions":["str"],"state":{"<[nondet]True>":{"heap":"monolith","type":{"map":{"['go-testcases/tarsis/count/count.go':23:11]:nondet":["boolean"],"['go-testcases/tarsis/count/count.go':23:11]:str":["string"],"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"['go-testcases/tarsis/count/count.go':23:11]:str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"}}}}},{"nodeId":6,"description":{"expressions":["str"],"state":{"<[nondet]True>":{"heap":"monolith","type":{"map":{"['go-testcases/tarsis/count/count.go':23:11]:nondet":["boolean"],"['go-testcases/tarsis/count/count.go':23:11]:str":["string"],"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"['go-testcases/tarsis/count/count.go':23:11]:str":"CertainlyContained: {}, MaybeContained: {}","str":"CertainlyContained: {}, MaybeContained: {}"},"stack":"CertainlyContained: {}, MaybeContained: {}"}}}}},{"nodeId":7,"description":{"expressions":["\"this is the thing\""],"state":{"<[nondet]True>":{"heap":"monolith","type":{"map":{"['go-testcases/tarsis/count/count.go':23:11]:nondet":["boolean"],"['go-testcases/tarsis/count/count.go':23:11]:str":["string"],"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"['go-testcases/tarsis/count/count.go':23:11]:str":"CertainlyContained: {}, MaybeContained: {}","str":"CertainlyContained: {}, MaybeContained: {}"},"stack":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"}}}}},{"nodeId":8,"description":{"expressions":["str"],"state":{"<[nondet]True>":{"heap":"monolith","type":{"map":{"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"}}}}},{"nodeId":9,"description":{"expressions":["nondet"],"state":{"<[nondet]False>":{"heap":"monolith","type":{"map":{"['go-testcases/tarsis/count/count.go':25:8]:nondet":["boolean"],"['go-testcases/tarsis/count/count.go':25:8]:str":["string"],"nondet":["boolean"],"str":["string"]},"stack":["boolean"]},"value":{"map":{"['go-testcases/tarsis/count/count.go':25:8]:str":"CertainlyContained: {}, MaybeContained: {}","str":"CertainlyContained: {}, MaybeContained: {}"},"stack":"_|_"}}}}},{"nodeId":10,"description":{"expressions":["str"],"state":{"<[nondet]False>":{"heap":"monolith","type":{"map":{"['go-testcases/tarsis/count/count.go':25:8]:nondet":["boolean"],"['go-testcases/tarsis/count/count.go':25:8]:str":["string"],"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"['go-testcases/tarsis/count/count.go':25:8]:str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"}}}}},{"nodeId":11,"description":{"expressions":["str"],"state":{"<[nondet]False>":{"heap":"monolith","type":{"map":{"['go-testcases/tarsis/count/count.go':25:8]:nondet":["boolean"],"['go-testcases/tarsis/count/count.go':25:8]:str":["string"],"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"['go-testcases/tarsis/count/count.go':25:8]:str":"CertainlyContained: {}, MaybeContained: {}","str":"CertainlyContained: {}, MaybeContained: {}"},"stack":"CertainlyContained: {}, MaybeContained: {}"}}}}},{"nodeId":12,"description":{"expressions":["\"the throat\""],"state":{"<[nondet]False>":{"heap":"monolith","type":{"map":{"['go-testcases/tarsis/count/count.go':25:8]:nondet":["boolean"],"['go-testcases/tarsis/count/count.go':25:8]:str":["string"],"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"['go-testcases/tarsis/count/count.go':25:8]:str":"CertainlyContained: {}, MaybeContained: {}","str":"CertainlyContained: {}, MaybeContained: {}"},"stack":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"}}}}},{"nodeId":13,"description":{"expressions":["str"],"state":{"<[nondet]False>":{"heap":"monolith","type":{"map":{"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"}}}}},{"nodeId":14,"description":{"expressions":["count"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[7, +Inf]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[6, 6]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[5, 5]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[4, 4]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[2, 2]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[1, 1]"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[7, +Inf]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[6, 6]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[5, 5]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[4, 4]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[2, 2]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[1, 1]"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}}}}},{"nodeId":15,"description":{"expressions":["count"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}}}}},{"nodeId":16,"description":{"expressions":["call_ret_value@'go-testcases/tarsis/count/count.go':29:25"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[7, +Inf]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[6, 6]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[5, 5]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[4, 4]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[2, 2]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[1, 1]"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[7, +Inf]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[6, 6]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[5, 5]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[4, 4]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[2, 2]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[1, 1]"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"call_ret_value@'go-testcases/tarsis/count/count.go':29:25":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}}}}},{"nodeId":17,"description":{"expressions":["str"],"state":{"<[nondet]False>":{"heap":"monolith","type":{"map":{"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"}}}}},{"nodeId":18,"description":{"expressions":["\"th\""],"state":{"<[nondet]False>":{"heap":"monolith","type":{"map":{"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"CertainlyContained: {h, t}, MaybeContained: {h, t}"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"nondet":["boolean"],"str":["string"]},"stack":["string"]},"value":{"map":{"str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"CertainlyContained: {h, t}, MaybeContained: {h, t}"}}}}},{"nodeId":19,"description":{"expressions":["open_call_ret_value@'go-testcases/tarsis/count/count.go':31:18"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}}}}},{"nodeId":20,"description":{"expressions":["count > 0"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}}}}},{"nodeId":21,"description":{"expressions":["count"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[7, +Inf]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[6, 6]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[5, 5]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[4, 4]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[2, 2]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[1, 1]"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[7, +Inf]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[6, 6]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[5, 5]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[4, 4]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[2, 2]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[1, 1]"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}}}}},{"nodeId":22,"description":{"expressions":["0"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}}}}},{"nodeId":23,"description":{"expressions":["open_call_ret_value@'go-testcases/tarsis/count/count.go':32:19"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}}}}},{"nodeId":24,"description":{"expressions":["count == 0"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}}}}},{"nodeId":25,"description":{"expressions":["count"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[7, +Inf]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[6, 6]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[5, 5]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[4, 4]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[2, 2]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[1, 1]"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[7, +Inf]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[6, 6]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[5, 5]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[4, 4]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[2, 2]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[1, 1]"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}}}}},{"nodeId":26,"description":{"expressions":["0"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}}}}},{"nodeId":27,"description":{"expressions":["open_call_ret_value@'go-testcases/tarsis/count/count.go':33:19"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"#TOP#"},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}}}}},{"nodeId":28,"description":{"expressions":["count == 3"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["bool"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"#TOP#"}}}}},{"nodeId":29,"description":{"expressions":["count"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[7, +Inf]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[6, 6]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[5, 5]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[4, 4]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[2, 2]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[1, 1]"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[0, 0]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[7, +Inf]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[6, 6]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[5, 5]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[4, 4]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[2, 2]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[1, 1]"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[0, 0]"}}}}},{"nodeId":30,"description":{"expressions":["3"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":["int(untyped)"]},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"[3, 3]"}}}}},{"nodeId":31,"description":{"expressions":["skip"],"state":{"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]False>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , a, e, h, o, r, t}, MaybeContained: { , a, e, h, o, r, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5::[strings::Contains(s, substr)]Summary>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[7, +Inf]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4::[strings::Contains(s, substr)]Iter5>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[6, 6]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3::[strings::Contains(s, substr)]Iter4>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[5, 5]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2::[strings::Contains(s, substr)]Iter3>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[4, 4]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1::[strings::Contains(s, substr)]Iter2>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[3, 3]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0::[strings::Contains(s, substr)]Iter1>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[2, 2]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True::[strings::Contains(s, substr)]Iter0>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[1, 1]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}},"<[nondet]True>":{"heap":"monolith","type":{"map":{"count":["int"],"nondet":["boolean"],"str":["string"]},"stack":"_|_"},"value":{"map":{"count":"[0, 0]","str":"CertainlyContained: { , e, g, h, i, n, s, t}, MaybeContained: { , e, g, h, i, n, s, t}"},"stack":"_|_"}}}}}]}