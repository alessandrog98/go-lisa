{
	"name": "untyped main::typeSwitch2()",
	"description": null,
	"nodes": [
		{
			"id": 0,
			"subNodes": [
				1,
				2
			],
			"text": "var i interface{} = true"
		},
		{
			"id": 1,
			"text": "i"
		},
		{
			"id": 2,
			"text": "true"
		},
		{
			"id": 3,
			"subNodes": [
				4
			],
			"text": "fmt::Println(\"I'm a bool\")"
		},
		{
			"id": 4,
			"text": "\"I'm a bool\""
		},
		{
			"id": 5,
			"text": "t, ok := .(bool)(i)"
		},
		{
			"id": 6,
			"text": "t"
		},
		{
			"id": 7,
			"text": "ok"
		},
		{
			"id": 8,
			"subNodes": [
				19
			],
			"text": ".(bool)(i)"
		},
		{
			"id": 10,
			"subNodes": [
				11,
				12
			],
			"text": "==(ok, true)"
		},
		{
			"id": 11,
			"text": "ok"
		},
		{
			"id": 12,
			"text": "true"
		},
		{
			"id": 13,
			"subNodes": [
				14
			],
			"text": "fmt::Println(\"I'm an int\")"
		},
		{
			"id": 14,
			"text": "\"I'm an int\""
		},
		{
			"id": 15,
			"text": "t, ok := .(int)(i)"
		},
		{
			"id": 16,
			"text": "t"
		},
		{
			"id": 17,
			"text": "ok"
		},
		{
			"id": 18,
			"subNodes": [
				19
			],
			"text": ".(int)(i)"
		},
		{
			"id": 19,
			"text": "i"
		},
		{
			"id": 20,
			"subNodes": [
				21,
				22
			],
			"text": "==(ok, true)"
		},
		{
			"id": 21,
			"text": "ok"
		},
		{
			"id": 22,
			"text": "true"
		},
		{
			"id": 23,
			"subNodes": [
				24,
				25
			],
			"text": "fmt::Printf(\"Don't know type %T\\n\", t)"
		},
		{
			"id": 24,
			"text": "\"Don't know type %T\\n\""
		},
		{
			"id": 25,
			"text": "t"
		},
		{
			"id": 26,
			"text": "ret"
		}
	],
	"edges": [
		{
			"sourceId": 0,
			"destId": 5,
			"kind": "SequentialEdge"
		},
		{
			"sourceId": 3,
			"destId": 26,
			"kind": "SequentialEdge"
		},
		{
			"sourceId": 5,
			"destId": 10,
			"kind": "SequentialEdge"
		},
		{
			"sourceId": 10,
			"destId": 3,
			"kind": "TrueEdge"
		},
		{
			"sourceId": 10,
			"destId": 15,
			"kind": "FalseEdge"
		},
		{
			"sourceId": 13,
			"destId": 26,
			"kind": "SequentialEdge"
		},
		{
			"sourceId": 15,
			"destId": 20,
			"kind": "SequentialEdge"
		},
		{
			"sourceId": 20,
			"destId": 13,
			"kind": "TrueEdge"
		},
		{
			"sourceId": 20,
			"destId": 23,
			"kind": "FalseEdge"
		},
		{
			"sourceId": 23,
			"destId": 26,
			"kind": "SequentialEdge"
		}
	],
	"descriptions": [
		{
			"nodeId": 0,
			"description": {
				"expressions": [
					"i"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 1,
			"description": {
				"expressions": [
					"i"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 2,
			"description": {
				"expressions": [
					"true"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 3,
			"description": {
				"expressions": [
					"open_call_ret_value@'go-testcases/cfg/switch/type/go-switch.go':23:36"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 4,
			"description": {
				"expressions": [
					"\"I'm a bool\""
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 5,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 6,
			"description": {
				"expressions": [
					"t"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 7,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 8,
			"description": {
				"expressions": [
					"i"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 10,
			"description": {
				"expressions": [
					"ok == true"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 11,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 12,
			"description": {
				"expressions": [
					"true"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 13,
			"description": {
				"expressions": [
					"open_call_ret_value@'go-testcases/cfg/switch/type/go-switch.go':25:36"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 14,
			"description": {
				"expressions": [
					"\"I'm an int\""
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 15,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 16,
			"description": {
				"expressions": [
					"t"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 17,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 18,
			"description": {
				"expressions": [
					"i"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 19,
			"description": {
				"expressions": [
					"i"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 20,
			"description": {
				"expressions": [
					"ok == true"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 21,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 22,
			"description": {
				"expressions": [
					"true"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 23,
			"description": {
				"expressions": [
					"open_call_ret_value@'go-testcases/cfg/switch/type/go-switch.go':27:48"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 24,
			"description": {
				"expressions": [
					"\"Don't know type %T\\n\""
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 25,
			"description": {
				"expressions": [
					"t"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 26,
			"description": {
				"expressions": [
					"skip"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		}
	]
}