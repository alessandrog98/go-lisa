{
	"name": "untyped main::typeSwitch1()",
	"description": null,
	"nodes": [
		{
			"id": 0,
			"subNodes": [
				1,
				2
			],
			"text": "var i interface{} = \"hello\""
		},
		{
			"id": 1,
			"text": "i"
		},
		{
			"id": 2,
			"text": "\"hello\""
		},
		{
			"id": 3,
			"subNodes": [
				4,
				5,
				6
			],
			"text": "fmt::Printf(\"Twice %v is %v\\n\", v, *(v, 2))"
		},
		{
			"id": 4,
			"text": "\"Twice %v is %v\\n\""
		},
		{
			"id": 5,
			"text": "v"
		},
		{
			"id": 6,
			"subNodes": [
				7,
				8
			],
			"text": "*(v, 2)"
		},
		{
			"id": 7,
			"text": "v"
		},
		{
			"id": 8,
			"text": "2"
		},
		{
			"id": 9,
			"text": "v, ok := .(int)(i)"
		},
		{
			"id": 10,
			"text": "v"
		},
		{
			"id": 11,
			"text": "ok"
		},
		{
			"id": 12,
			"subNodes": [
				26
			],
			"text": ".(int)(i)"
		},
		{
			"id": 14,
			"subNodes": [
				15,
				16
			],
			"text": "==(ok, true)"
		},
		{
			"id": 15,
			"text": "ok"
		},
		{
			"id": 16,
			"text": "true"
		},
		{
			"id": 17,
			"subNodes": [
				18,
				19,
				20
			],
			"text": "fmt::Printf(\"%q is %v bytes long\\n\", v, len(v))"
		},
		{
			"id": 18,
			"text": "\"%q is %v bytes long\\n\""
		},
		{
			"id": 19,
			"text": "v"
		},
		{
			"id": 20,
			"subNodes": [
				21
			],
			"text": "len(v)"
		},
		{
			"id": 21,
			"text": "v"
		},
		{
			"id": 22,
			"text": "v, ok := .(string)(i)"
		},
		{
			"id": 23,
			"text": "v"
		},
		{
			"id": 24,
			"text": "ok"
		},
		{
			"id": 25,
			"subNodes": [
				26
			],
			"text": ".(string)(i)"
		},
		{
			"id": 26,
			"text": "i"
		},
		{
			"id": 27,
			"subNodes": [
				28,
				29
			],
			"text": "==(ok, true)"
		},
		{
			"id": 28,
			"text": "ok"
		},
		{
			"id": 29,
			"text": "true"
		},
		{
			"id": 30,
			"subNodes": [
				31,
				32
			],
			"text": "fmt::Printf(\"I don't know about type %T!\\n\", v)"
		},
		{
			"id": 31,
			"text": "\"I don't know about type %T!\\n\""
		},
		{
			"id": 32,
			"text": "v"
		},
		{
			"id": 33,
			"text": "ret"
		}
	],
	"edges": [
		{
			"sourceId": 0,
			"destId": 9,
			"kind": "SequentialEdge"
		},
		{
			"sourceId": 3,
			"destId": 33,
			"kind": "SequentialEdge"
		},
		{
			"sourceId": 9,
			"destId": 14,
			"kind": "SequentialEdge"
		},
		{
			"sourceId": 14,
			"destId": 3,
			"kind": "TrueEdge"
		},
		{
			"sourceId": 14,
			"destId": 22,
			"kind": "FalseEdge"
		},
		{
			"sourceId": 17,
			"destId": 33,
			"kind": "SequentialEdge"
		},
		{
			"sourceId": 22,
			"destId": 27,
			"kind": "SequentialEdge"
		},
		{
			"sourceId": 27,
			"destId": 17,
			"kind": "TrueEdge"
		},
		{
			"sourceId": 27,
			"destId": 30,
			"kind": "FalseEdge"
		},
		{
			"sourceId": 30,
			"destId": 33,
			"kind": "SequentialEdge"
		}
	],
	"descriptions": [
		{
			"nodeId": 0,
			"description": {
				"expressions": [
					"i"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 1,
			"description": {
				"expressions": [
					"i"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 2,
			"description": {
				"expressions": [
					"\"hello\""
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 3,
			"description": {
				"expressions": [
					"open_call_ret_value@'go-testcases/cfg/switch/type/go-switch.go':10:39"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 4,
			"description": {
				"expressions": [
					"\"Twice %v is %v\\n\""
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 5,
			"description": {
				"expressions": [
					"v"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 6,
			"description": {
				"expressions": [
					"v * 2"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 7,
			"description": {
				"expressions": [
					"v"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 8,
			"description": {
				"expressions": [
					"2"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 9,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 10,
			"description": {
				"expressions": [
					"v"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 11,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 12,
			"description": {
				"expressions": [
					"i"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 14,
			"description": {
				"expressions": [
					"ok == true"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 15,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 16,
			"description": {
				"expressions": [
					"true"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 17,
			"description": {
				"expressions": [
					"open_call_ret_value@'go-testcases/cfg/switch/type/go-switch.go':12:47"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 18,
			"description": {
				"expressions": [
					"%q is %v bytes long\\n"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 19,
			"description": {
				"expressions": [
					"v"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 20,
			"description": {
				"expressions": [
					"strlen v"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 21,
			"description": {
				"expressions": [
					"v"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 22,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 23,
			"description": {
				"expressions": [
					"v"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 24,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 25,
			"description": {
				"expressions": [
					"i"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 26,
			"description": {
				"expressions": [
					"i"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 27,
			"description": {
				"expressions": [
					"ok == true"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 28,
			"description": {
				"expressions": [
					"ok"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 29,
			"description": {
				"expressions": [
					"true"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 30,
			"description": {
				"expressions": [
					"open_call_ret_value@'go-testcases/cfg/switch/type/go-switch.go':14:47"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 31,
			"description": {
				"expressions": [
					"I don't know about type %T!\\n"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 32,
			"description": {
				"expressions": [
					"v"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		},
		{
			"nodeId": 33,
			"description": {
				"expressions": [
					"skip"
				],
				"state": {
					"heap": "monolith",
					"type": "noop",
					"value": "noop"
				}
			}
		}
	]
}