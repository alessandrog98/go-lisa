digraph {
	"node0" [shape="rect",color="black",label=<err := PutState(APIstub, &quot;samekey&quot;, ([]uint8)(&quot;myvalue&quot;))<BR/><BR/>Location: 'go-testcases/hf/read-write/single/single3/single3.go':24:54>];
	"node1" [shape="rect",color="black",peripheries="2",label=<value, err := GetState(APIstub, args::1(args, 1))<BR/><BR/>Location: 'go-testcases/hf/read-write/single/single3/single3.go':26:40>];
	"node0" -> "node1" [color="black"];
subgraph cluster_legend {
	label="Legend";
	style=dotted;
	node [shape=plaintext];
	"legend" [label=<<table border="0" cellpadding="2" cellspacing="0" cellborder="0"><tr><td align="right">write instruction border&nbsp;</td><td align="left"><font color="black">black</font>, single</td></tr><tr><td align="right">read instruction border&nbsp;</td><td align="left"><font color="black">black</font>, double</td></tr><tr><td align="right">other instructions border&nbsp;</td><td align="left"><font color="gray">gray</font>, single</td></tr><tr><td align="right">sequential edge&nbsp;</td><td align="left"><font color="black">black</font>, solid</td></tr><tr><td align="right">caller edge&nbsp;</td><td align="left"><font color="blue">blue</font>, solid</td></tr><tr><td align="right">callee edge&nbsp;</td><td align="left"><font color="gray">gray</font>, solid</td></tr><tr><td align="right">defer edge&nbsp;</td><td align="left"><font color="red">red</font>, dashed</td></tr></table>>];
}

}
